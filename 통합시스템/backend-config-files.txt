// 파일: .env
NODE_ENV=development
PORT=3000

# 데이터베이스 설정
DB_HOST=localhost
DB_USER=fluid_medical_user
DB_PASSWORD=your_secure_password
DB_NAME=fluid_medical_system

# JWT 설정
JWT_SECRET=your_jwt_secret_key_change_this_in_production
JWT_EXPIRES_IN=1h

# 로깅 설정
LOG_LEVEL=info

// 파일: .gitignore
# 환경 변수
.env

# 로그
*.log
logs/

# 종속성
node_modules/

# IDE 파일
.vscode/
.idea/

# 캐시
.npm
.eslintcache

# 빌드 결과물
dist/
build/

# 시스템 파일
.DS_Store
Thumbs.db

// 파일: package.json
{
  "name": "fluid-medical-system-backend",
  "version": "1.0.0",
  "description": "유체역학 기반 의료 시스템 백엔드",
  "main": "server.js",
  "scripts": {
    "start": "node server.js",
    "dev": "nodemon server.js",
    "setup-db": "node scripts/setup-db.js",
    "test": "jest"
  },
  "keywords": [
    "fluid-dynamics",
    "medical",
    "navier-stokes",
    "blockchain",
    "microservices"
  ],
  "author": "",
  "license": "MIT",
  "dependencies": {
    "axios": "^1.6.7",
    "bcrypt": "^5.1.1",
    "cors": "^2.8.5",
    "dotenv": "^16.4.1",
    "express": "^4.18.2",
    "express-rate-limit": "^7.1.5",
    "helmet": "^7.1.0",
    "jsonwebtoken": "^9.0.2",
    "mysql2": "^3.9.1",
    "winston": "^3.11.0"
  },
  "devDependencies": {
    "jest": "^29.7.0",
    "nodemon": "^3.0.3",
    "supertest": "^6.3.4"
  }
}

// 파일: scripts/setup-db.js
const mysql = require('mysql2/promise');
const dotenv = require('dotenv');
const fs = require('fs');
const path = require('path');

// 환경 변수 로드
dotenv.config();

async function setupDatabase() {
  try {
    // 데이터베이스 연결
    const connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      multipleStatements: true // 여러 SQL 문을 한 번에 실행
    });

    console.log('데이터베이스 서버에 연결되었습니다.');

    // 데이터베이스 생성
    await connection.query(`CREATE DATABASE IF NOT EXISTS ${process.env.DB_NAME || 'fluid_medical_system'}`);
    console.log(`${process.env.DB_NAME || 'fluid_medical_system'} 데이터베이스가 생성되었습니다.`);

    // 생성된 데이터베이스 사용
    await connection.query(`USE ${process.env.DB_NAME || 'fluid_medical_system'}`);

    // 스키마 파일 읽기
    const schemaFilePath = path.join(__dirname, '../sql/schema.sql');
    const schemaSql = fs.readFileSync(schemaFilePath, 'utf8');

    // 스키마 실행
    console.log('데이터베이스 스키마를 설정 중입니다...');
    await connection.query(schemaSql);
    console.log('데이터베이스 스키마가 성공적으로 설정되었습니다.');

    // 샘플 데이터 파일 읽기
    const sampleDataFilePath = path.join(__dirname, '../sql/sample_data.sql');
    if (fs.existsSync(sampleDataFilePath)) {
      const sampleDataSql = fs.readFileSync(sampleDataFilePath, 'utf8');
      
      // 샘플 데이터 실행
      console.log('샘플 데이터를 로드 중입니다...');
      await connection.query(sampleDataSql);
      console.log('샘플 데이터가 성공적으로 로드되었습니다.');
    }

    // 연결 종료
    await connection.end();
    console.log('데이터베이스 설정이 완료되었습니다.');
  } catch (error) {
    console.error('데이터베이스 설정 중 오류가 발생했습니다:', error);
    process.exit(1);
  }
}

// 스크립트 실행
setupDatabase();