// src/pages/dashboard/DashboardPage.js
import React, { useState, useEffect, useContext } from 'react';
import { AuthContext } from '../../contexts/AuthContext';
import api from '../../services/api';
import { Link } from 'react-router-dom';

const DashboardPage = () => {
  const { currentUser } = useContext(AuthContext);
  const [stats, setStats] = useState({
    patients: 0,
    drugs: 0,
    prescriptions: 0,
    simulations: 0
  });
  const [recentActivity, setRecentActivity] = useState([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchDashboardData = async () => {
      try {
        setLoading(true);
        
        // 대시보드 통계 데이터 가져오기
        const statsResponse = await api.get('/dashboard/stats');
        setStats(statsResponse.data);
        
        // 최근 활동 데이터 가져오기
        const activityResponse = await api.get('/dashboard/recent-activity');
        setRecentActivity(activityResponse.data);
        
        setLoading(false);
      } catch (error) {
        console.error('대시보드 데이터 로드 오류:', error);
        setLoading(false);
      }
    };
    
    fetchDashboardData();
  }, []);

  // 로딩 중 상태 표시
  if (loading) {
    return <div className="loading">대시보드 데이터를 불러오는 중...</div>;
  }

  return (
    <div className="dashboard-page">
      <header className="page-header">
        <h1>대시보드</h1>
        <p>안녕하세요, {currentUser.username}님. 의료 시스템 대시보드에 오신 것을 환영합니다.</p>
      </header>
      
      <section className="stats-cards">
        <div className="stats-card">
          <div className="stats-icon">
            <i className="fas fa-user-injured"></i>
          </div>
          <div className="stats-content">
            <h3>환자</h3>
            <p className="stats-number">{stats.patients}</p>
          </div>
          <Link to="/dashboard/patients" className="stats-link">
            자세히 보기 <i className="fas fa-arrow-right"></i>
          </Link>
        </div>
        
        <div className="stats-card">
          <div className="stats-icon">
            <i className="fas fa-pills"></i>
          </div>
          <div className="stats-content">
            <h3>약물</h3>
            <p className="stats-number">{stats.drugs}</p>
          </div>
          <Link to="/dashboard/drugs" className="stats-link">
            자세히 보기 <i className="fas fa-arrow-right"></i>
          </Link>
        </div>
        
        <div className="stats-card">
          <div className="stats-icon">
            <i className="fas fa-file-prescription"></i>
          </div>
          <div className="stats-content">
            <h3>처방전</h3>
            <p className="stats-number">{stats.prescriptions}</p>
          </div>
          <Link to="/dashboard/prescriptions" className="stats-link">
            자세히 보기 <i className="fas fa-arrow-right"></i>
          </Link>
        </div>
        
        <div className="stats-card">
          <div className="stats-icon">
            <i className="fas fa-chart-line"></i>
          </div>
          <div className="stats-content">
            <h3>시뮬레이션</h3>
            <p className="stats-number">{stats.simulations}</p>
          </div>
          <Link to="/dashboard/simulations" className="stats-link">
            자세히 보기 <i className="fas fa-arrow-right"></i>
          </Link>
        </div>
      </section>
      
      <section className="dashboard-widgets">
        <div className="widget">
          <h2>최근 활동</h2>
          <div className="activity-list">
            {recentActivity.length > 0 ? (
              recentActivity.map((activity) => (
                <div key={activity.id} className="activity-item">
                  <div className="activity-icon">
                    <i className={`fas fa-${activity.icon}`}></i>
                  </div>
                  <div className="activity-content">
                    <p>{activity.description}</p>
                    <small className="activity-time">{new Date(activity.timestamp).toLocaleString()}</small>
                  </div>
                </div>
              ))
            ) : (
              <p className="empty-state">최근 활동이 없습니다.</p>
            )}
          </div>
        </div>
        
        <div className="widget">
          <h2>빠른 작업</h2>
          <div className="quick-actions">
            {currentUser.role === 'Doctor' && (
              <>
                <Link to="/dashboard/patients/new" className="quick-action-btn">
                  <i className="fas fa-user-plus"></i> 환자 등록
                </Link>
                <Link to="/dashboard/prescriptions/new" className="quick-action-btn">
                  <i className="fas fa-file-medical"></i> 처방전 작성
                </Link>
              </>
            )}
            
            {currentUser.role === 'Researcher' && (
              <>
                <Link to="/dashboard/simulations/drug-delivery/new" className="quick-action-btn">
                  <i className="fas fa-syringe"></i> 약물 전달 시뮬레이션
                </Link>
                <Link to="/dashboard/simulations/cardiovascular/new" className="quick-action-btn">
                  <i className="fas fa-heartbeat"></i> 심혈관 시뮬레이션
                </Link>
              </>
            )}
            
            {currentUser.role === 'Admin' && (
              <>
                <Link to="/dashboard/patients/new" className="quick-action-btn">
                  <i className="fas fa-user-plus"></i> 환자 등록
                </Link>
                <Link to="/dashboard/drugs/new" className="quick-action-btn">
                  <i className="fas fa-capsules"></i> 약물 등록
                </Link>
              </>
            )}
            
            {currentUser.role === 'Pharmacist' && (
              <>
                <Link to="/dashboard/drugs/new" className="quick-action-btn">
                  <i className="fas fa-capsules"></i> 약물 등록
                </Link>
                <Link to="/dashboard/drugs/interactions/new" className="quick-action-btn">
                  <i className="fas fa-exchange-alt"></i> 약물 상호작용 등록
                </Link>
              </>
            )}
          </div>
        </div>
      </section>
    </div>
  );
};

export default DashboardPage;

// src/pages/simulations/SimulationsPage.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../../services/api';

const SimulationsPage = () => {
  const [drugDeliverySimulations, setDrugDeliverySimulations] = useState([]);
  const [cardiovascularSimulations, setCardiovascularSimulations] = useState([]);
  const [loading, setLoading] = useState(true);
  const [activeTab, setActiveTab] = useState('drug-delivery');

  useEffect(() => {
    const fetchSimulations = async () => {
      try {
        setLoading(true);
        
        // 약물 전달 시뮬레이션 데이터 가져오기
        const drugDeliveryResponse = await api.get('/simulations/drug-delivery');
        setDrugDeliverySimulations(drugDeliveryResponse.data);
        
        // 심혈관 시뮬레이션 데이터 가져오기
        const cardiovascularResponse = await api.get('/simulations/cardiovascular');
        setCardiovascularSimulations(cardiovascularResponse.data);
        
        setLoading(false);
      } catch (error) {
        console.error('시뮬레이션 데이터 로드 오류:', error);
        setLoading(false);
      }
    };
    
    fetchSimulations();
  }, []);

  // 로딩 중 상태 표시
  if (loading) {
    return <div className="loading">시뮬레이션 데이터를 불러오는 중...</div>;
  }

  return (
    <div className="simulations-page">
      <header className="page-header">
        <h1>시뮬레이션</h1>
        <div className="page-actions">
          <Link to="/dashboard/simulations/drug-delivery/new" className="btn btn-primary">
            <i className="fas fa-plus"></i> 약물 전달 시뮬레이션
          </Link>
          <Link to="/dashboard/simulations/cardiovascular/new" className="btn btn-outline">
            <i className="fas fa-plus"></i> 심혈관 시뮬레이션
          </Link>
        </div>
      </header>
      
      <div className="tabs">
        <button
          className={`tab-btn ${activeTab === 'drug-delivery' ? 'active' : ''}`}
          onClick={() => setActiveTab('drug-delivery')}
        >
          약물 전달 시뮬레이션
        </button>
        <button
          className={`tab-btn ${activeTab === 'cardiovascular' ? 'active' : ''}`}
          onClick={() => setActiveTab('cardiovascular')}
        >
          심혈관 시뮬레이션
        </button>
      </div>
      
      <div className="tab-content">
        {activeTab === 'drug-delivery' && (
          <div className="tab-pane">
            <div className="data-table">
              <table>
                <thead>
                  <tr>
                    <th>환자</th>
                    <th>약물</th>
                    <th>대상 기관</th>
                    <th>레이놀즈 수</th>
                    <th>전달 효율성</th>
                    <th>시뮬레이션 날짜</th>
                    <th>작업</th>
                  </tr>
                </thead>
                <tbody>
                  {drugDeliverySimulations.length > 0 ? (
                    drugDeliverySimulations.map((simulation) => (
                      <tr key={simulation.simulation_id}>
                        <td>{simulation.patient_name}</td>
                        <td>{simulation.drug_name}</td>
                        <td>{simulation.target_organ}</td>
                        <td>{simulation.reynolds_number.toFixed(2)}</td>
                        <td>{simulation.delivery_efficiency.toFixed(2)}%</td>
                        <td>{new Date(simulation.simulation_date).toLocaleString()}</td>
                        <td>
                          <Link to={`/dashboard/simulations/drug-delivery/${simulation.simulation_id}`} className="action-btn">
                            <i className="fas fa-eye"></i>
                          </Link>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="7" className="empty-state">약물 전달 시뮬레이션 데이터가 없습니다.</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        )}
        
        {activeTab === 'cardiovascular' && (
          <div className="tab-pane">
            <div className="data-table">
              <table>
                <thead>
                  <tr>
                    <th>환자</th>
                    <th>혈관 직경</th>
                    <th>혈류 속도</th>
                    <th>진동 전단 지수</th>
                    <th>위험 평가</th>
                    <th>시뮬레이션 날짜</th>
                    <th>작업</th>
                  </tr>
                </thead>
                <tbody>
                  {cardiovascularSimulations.length > 0 ? (
                    cardiovascularSimulations.map((simulation) => (
                      <tr key={simulation.simulation_id}>
                        <td>{simulation.patient_name}</td>
                        <td>{simulation.vessel_diameter} mm</td>
                        <td>{simulation.flow_rate} cm/s</td>
                        <td>{simulation.oscillatory_shear_index.toFixed(2)}</td>
                        <td>
                          <span className={`badge badge-${simulation.risk_assessment.toLowerCase()}`}>
                            {simulation.risk_assessment}
                          </span>
                        </td>
                        <td>{new Date(simulation.simulation_date).toLocaleString()}</td>
                        <td>
                          <Link to={`/dashboard/simulations/cardiovascular/${simulation.simulation_id}`} className="action-btn">
                            <i className="fas fa-eye"></i>
                          </Link>
                        </td>
                      </tr>
                    ))
                  ) : (
                    <tr>
                      <td colSpan="7" className="empty-state">심혈관 시뮬레이션 데이터가 없습니다.</td>
                    </tr>
                  )}
                </tbody>
              </table>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default SimulationsPage;

// src/pages/simulations/SimulationDetailPage.js
import React, { useState, useEffect } from 'react';
import { useParams, Link } from 'react-router-dom';
import api from '../../services/api';

const SimulationDetailPage = () => {
  const { type, id } = useParams();
  const [simulation, setSimulation] = useState(null);
  const [navierStokesData, setNavierStokesData] = useState(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchSimulationData = async () => {
      try {
        setLoading(true);
        
        // 시뮬레이션 결과 가져오기
        const response = await api.get(`/simulations/results/${type}/${id}`);
        setSimulation(response.data.simulationResults);
        setNavierStokesData(response.data.navierStokesData);
        
        setLoading(false);
      } catch (error) {
        console.error('시뮬레이션 데이터 로드 오류:', error);
        setLoading(false);
      }
    };
    
    fetchSimulationData();
  }, [type, id]);

  // 로딩 중 상태 표시
  if (loading) {
    return <div className="loading">시뮬레이션 데이터를 불러오는 중...</div>;
  }

  // 시뮬레이션 데이터가 없는 경우
  if (!simulation) {
    return <div className="error-message">시뮬레이션 데이터를 찾을 수 없습니다.</div>;
  }

  // 시뮬레이션 유형에 따른 결과 표시
  return (
    <div className="simulation-detail-page">
      <header className="page-header">
        <div className="breadcrumbs">
          <Link to="/dashboard/simulations">시뮬레이션</Link> &gt; 
          {type === 'drug-delivery' ? ' 약물 전달 시뮬레이션' : ' 심혈관 시뮬레이션'} &gt; 
          {simulation.simulation_id}
        </div>
        <h1>
          {type === 'drug-delivery' ? '약물 전달 시뮬레이션' : '심혈관 시뮬레이션'} 결과
        </h1>
      </header>
      
      <div className="detail-container">
        <div className="detail-sidebar">
          <div className="detail-card">
            <h3>기본 정보</h3>
            <div className="detail-info">
              <div className="info-item">
                <span className="info-label">시뮬레이션 ID</span>
                <span className="info-value">{simulation.simulation_id}</span>
              </div>
              <div className="info-item">
                <span className="info-label">시뮬레이션 날짜</span>
                <span className="info-value">{new Date(simulation.simulation_date).toLocaleString()}</span>
              </div>
              <div className="info-item">
                <span className="info-label">환자</span>
                <span className="info-value">{simulation.patient_name || '-'}</span>
              </div>
              
              {type === 'drug-delivery' && (
                <>
                  <div className="info-item">
                    <span className="info-label">약물</span>
                    <span className="info-value">{simulation.drug_name || '-'}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">대상 기관</span>
                    <span className="info-value">{simulation.target_organ}</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">주입 부위</span>
                    <span className="info-value">{simulation.injection_site}</span>
                  </div>
                </>
              )}
              
              {type === 'cardiovascular' && (
                <>
                  <div className="info-item">
                    <span className="info-label">혈액 점성도</span>
                    <span className="info-value">{simulation.blood_viscosity} cP</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">혈관 직경</span>
                    <span className="info-value">{simulation.vessel_diameter} mm</span>
                  </div>
                  <div className="info-item">
                    <span className="info-label">혈류 속도</span>
                    <span className="info-value">{simulation.flow_rate} cm/s</span>
                  </div>
                </>
              )}
            </div>
          </div>
          
          <div className="detail-card">
            <h3>나비에-스톡스 시뮬레이션 정보</h3>
            {navierStokesData ? (
              <div className="detail-info">
                <div className="info-item">
                  <span className="info-label">그리드 해상도</span>
                  <span className="info-value">{navierStokesData.grid_resolution}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">시간 단계</span>
                  <span className="info-value">{navierStokesData.time_steps}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">수렴 기준</span>
                  <span className="info-value">{navierStokesData.convergence_criteria}</span>
                </div>
                <div className="info-item">
                  <span className="info-label">실행 시간</span>
                  <span className="info-value">{navierStokesData.execution_time} 초</span>
                </div>
                {navierStokesData.anomaly_detected && (
                  <div className="info-item alert">
                    <span className="info-label">이상 감지</span>
                    <span className="info-value">{navierStokesData.anomaly_description}</span>
                  </div>
                )}
              </div>
            ) : (
              <div className="empty-state">나비에-스톡스 시뮬레이션 데이터가 없습니다.</div>
            )}
          </div>
        </div>
        
        <div className="detail-content">
          <div className="detail-card">
            <h3>시뮬레이션 결과</h3>
            
            {type === 'drug-delivery' && (
              <div className="simulation-results">
                <div className="result-chart">
                  {/* 실제 구현에서는 Chart.js 등을 사용하여 그래프 표시 */}
                  <div className="placeholder-chart drug-delivery-chart">
                    약물 전달 시뮬레이션 결과 그래프
                  </div>
                </div>
                
                <div className="result-metrics">
                  <div className="metric-card">
                    <h4>레이놀즈 수</h4>
                    <div className="metric-value">{simulation.reynolds_number.toFixed(2)}</div>
                    <div className="metric-description">
                      유체의 흐름이 {simulation.reynolds_number < 2300 ? '층류' : '난류'}입니다.
                    </div>
                  </div>
                  
                  <div className="metric-card">
                    <h4>유효 점성도</h4>
                    <div className="metric-value">{simulation.effective_viscosity.toFixed(2)} cP</div>
                    <div className="metric-description">
                      약물의 유효 점성도로 전달 효율에 영향을 줍니다.
                    </div>
                  </div>
                  
                  <div className="metric-card">
                    <h4>전달 효율성</h4>
                    <div className="metric-value">{simulation.delivery_efficiency.toFixed(2)}%</div>
                    <div className="metric-description">
                      대상 기관에 도달하는 약물의 비율입니다.
                    </div>
                  </div>
                </div>
              </div>
            )}
            
            {type === 'cardiovascular' && (
              <div className="simulation-results">
                <div className="result-chart">
                  {/* 실제 구현에서는 Chart.js 등을 사용하여 그래프 표시 */}
                  <div className="placeholder-chart cardiovascular-chart">
                    심혈관 시뮬레이션 결과 그래프
                  </div>
                </div>
                
                <div className="result-metrics">
                  <div className="metric-card">
                    <h4>진동 전단 지수</h4>
                    <div className="metric-value">{simulation.oscillatory_shear_index.toFixed(2)}</div>
                    <div className="metric-description">
                      혈관 내벽에 작용하는 전단력의 변동성을 나타냅니다.
                    </div>
                  </div>
                  
                  <div className="metric-card">
                    <h4>위험 평가</h4>
                    <div className={`metric-value risk-${simulation.risk_assessment.toLowerCase()}`}>
                      {simulation.risk_assessment}
                    </div>
                    <div className="metric-description">
                      심혈관 질환 위험도 평가 결과입니다.
                    </div>
                  </div>
                  
                  <div className="metric-card">
                    <h4>압력 구배</h4>
                    <div className="metric-value">{simulation.pressure_gradient.toFixed(2)} mmHg</div>
                    <div className="metric-description">
                      혈관 내 압력 변화율입니다.
                    </div>
                  </div>
                </div>
              </div>
            )}
          </div>
          
          {navierStokesData && (
            <div className="detail-card">
              <h3>유체역학 데이터 시각화</h3>
              <div className="data-visualization">
                <div className="visualization-tabs">
                  <button className="tab-btn active">속도장</button>
                  <button className="tab-btn">압력장</button>
                  <button className="tab-btn">와도 데이터</button>
                </div>
                
                <div className="visualization-content">
                  {/* 실제 구현에서는 Three.js, D3.js 등을 사용하여 3D 시각화 */}
                  <div className="placeholder-visualization">
                    유체역학 데이터 3D 시각화 영역
                  </div>
                </div>
              </div>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default SimulationDetailPage;

// src/pages/prescriptions/PrescriptionsPage.js
import React, { useState, useEffect } from 'react';
import { Link } from 'react-router-dom';
import api from '../../services/api';

const PrescriptionsPage = () => {
  const [prescriptions, setPrescriptions] = useState([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [statusFilter, setStatusFilter] = useState('all');

  useEffect(() => {
    const fetchPrescriptions = async () => {
      try {
        setLoading(true);
        const response = await api.get('/prescriptions');
        setPrescriptions(response.data.prescriptions);
        setLoading(false);
      } catch (error) {
        console.error('처방전 데이터 로드 오류:', error);
        setLoading(false);
      }
    };
    
    fetchPrescriptions();
  }, []);

  // 검색 및 필터링된 처방전 목록
  const filteredPrescriptions = prescriptions.filter(prescription => {
    const matchesSearch = 
      prescription.patient_first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      prescription.patient_last_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      prescription.doctor_first_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
      prescription.doctor_last_name.toLowerCase().includes(searchTerm.toLowerCase());
    
    const matchesStatus = statusFilter === 'all' || prescription.status === statusFilter;
    
    return matchesSearch && matchesStatus;
  });

  // 로딩 중 상태 표시
  if (loading) {
    return <div className="loading">처방전 데이터를 불러오는 중...</div>;
  }

  return (
    <div className="prescriptions-page">
      <header className="page-header">
        <h1>처방전</h1>
        <div className="page-actions">
          <Link to="/dashboard/prescriptions/new" className="btn btn-primary">
            <i className="fas fa-plus"></i> 처방전 작성
          </Link>
        </div>
      </header>
      
      <div className="filters">
        <div className="search-box">
          <input
            type="text"
            placeholder="환자 또는 의사 이름으로 검색..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
          />
          <i className="fas fa-search"></i>
        </div>
        
        <div className="filter-options">
          <label>상태:</label>
          <select
            value={statusFilter}
            onChange={(e) => setStatusFilter(e.target.value)}
          >
            <option value="all">전체</option>
            <option value="Active">활성</option>
            <option value="Completed">완료</option>
            <option value="Cancelled">취소</option>
          </select>
        </div>
      </div>
      
      <div className="data-table">
        <table>
          <thead>
            <tr>
              <th>처방 ID</th>
              <th>환자</th>
              <th>처방 의사</th>
              <th>처방일</th>
              <th>상태</th>
              <th>블록체인 해시</th>
              <th>작업</th>
            </tr>
          </thead>
          <tbody>
            {filteredPrescriptions.length > 0 ? (
              filteredPrescriptions.map((prescription) => (
                <tr key={prescription.prescription_id}>
                  <td>{prescription.prescription_id}</td>
                  <td>
                    {prescription.patient_first_name} {prescription.patient_last_name}
                  </td>
                  <td>
                    {prescription.doctor_first_name} {prescription.doctor_last_name}
                  </td>
                  <td>{new Date(prescription.prescription_date).toLocaleDateString()}</td>
                  <td>
                    <span className={`status-badge ${prescription.status.toLowerCase()}`}>
                      {prescription.status}
                    </span>
                  </td>
                  <td>
                    <span className="hash-preview" title={prescription.blockchain_hash}>
                      {prescription.blockchain_hash.substring(0, 8)}...
                    </span>
                  </td>
                  <td>
                    <Link to={`/dashboard/prescriptions/${prescription.prescription_id}`} className="action-btn">
                      <i className="fas fa-eye"></i>
                    </Link>
                  </td>
                </tr>
              ))
            ) : (
              <tr>
                <td colSpan="7" className="empty-state">처방전 데이터가 없습니다.</td>
              </tr>
            )}
          </tbody>
        </table>
      </div>
    </div>
  );
};

export default PrescriptionsPage;

// 추가 대시보드 컴포넌트 스타일 (main.css에 추가)
/*
.dashboard-page {
  width: 100%;
}

.page-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
}

.stats-cards {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 1.5rem;
  margin-bottom: 2rem;
}

.stats-card {
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
}

.stats-icon {
  font-size: 2rem;
  color: var(--primary-color);
  margin-bottom: 1rem;
}

.stats-content h3 {
  margin-bottom: 0.5rem;
  font-size: 1rem;
  color: var(--dark-text);
}

.stats-number {
  font-size: 2rem;
  font-weight: 700;
  color: var(--primary-color);
  margin-bottom: 1rem;
}

.stats-link {
  margin-top: auto;
  display: flex;
  align-items: center;
  justify-content: flex-end;
  color: var(--primary-color);
  font-weight: 500;
}

.stats-link i {
  margin-left: 0.5rem;
}

.dashboard-widgets {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
  gap: 1.5rem;
}

.widget {
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
}

.widget h2 {
  margin-bottom: 1.5rem;
  font-size: 1.2rem;
}

.activity-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.activity-item {
  display: flex;
  gap: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.activity-item:last-child {
  border-bottom: none;
}

.activity-icon {
  width: 40px;
  height: 40px;
  background-color: rgba(25, 118, 210, 0.1);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary-color);
  font-size: 1.2rem;
  flex-shrink: 0;
}

.activity-time {
  display: block;
  color: #999;
  margin-top: 0.5rem;
}

.quick-actions {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(200px, 1fr));
  gap: 1rem;
}

.quick-action-btn {
  background-color: var(--light-bg);
  border-radius: var(--border-radius);
  padding: 1rem;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  text-align: center;
  transition: var(--transition);
}

.quick-action-btn i {
  font-size: 1.5rem;
  color: var(--primary-color);
}

.quick-action-btn:hover {
  background-color: var(--primary-color);
  color: var(--light-text);
}

.quick-action-btn:hover i {
  color: var(--light-text);
}

.data-table {
  width: 100%;
  overflow-x: auto;
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
}

table {
  width: 100%;
  border-collapse: collapse;
}

th, td {
  padding: 1rem;
  text-align: left;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

th {
  background-color: #f5f5f5;
  font-weight: 600;
}

tr:last-child td {
  border-bottom: none;
}

.status-badge {
  display: inline-block;
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  font-size: 0.875rem;
  font-weight: 500;
}

.status-badge.active {
  background-color: rgba(56, 142, 60, 0.1);
  color: #388E3C;
}

.status-badge.completed {
  background-color: rgba(25, 118, 210, 0.1);
  color: #1976D2;
}

.status-badge.cancelled {
  background-color: rgba(211, 47, 47, 0.1);
  color: #D32F2F;
}

.action-btn {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  background-color: rgba(25, 118, 210, 0.1);
  color: var(--primary-color);
  transition: var(--transition);
}

.action-btn:hover {
  background-color: var(--primary-color);
  color: var(--light-text);
}

.tabs {
  display: flex;
  margin-bottom: 1.5rem;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.tab-btn {
  padding: 0.75rem 1.5rem;
  background: none;
  border: none;
  cursor: pointer;
  font-weight: 500;
  color: var(--dark-text);
  border-bottom: 2px solid transparent;
  transition: var(--transition);
}

.tab-btn.active {
  color: var(--primary-color);
  border-bottom-color: var(--primary-color);
}

.filters {
  display: flex;
  justify-content: space-between;
  margin-bottom: 1.5rem;
}

.search-box {
  position: relative;
  width: 300px;
}

.search-box input {
  width: 100%;
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 1px solid #ddd;
  border-radius: var(--border-radius);
}

.search-box i {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  color: #999;
}

.filter-options {
  display: flex;
  align-items: center;
  gap: 0.5rem;
}

.filter-options select {
  padding: 0.75rem;
  border: 1px solid #ddd;
  border-radius: var(--border-radius);
  background-color: white;
}

.detail-container {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 1.5rem;
}

.detail-sidebar {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.detail-card {
  background-color: var(--card-bg);
  border-radius: var(--border-radius);
  box-shadow: var(--box-shadow);
  padding: 1.5rem;
}

.detail-card h3 {
  margin-bottom: 1rem;
  font-size: 1.2rem;
}

.detail-info {
  display: flex;
  flex-direction: column;
  gap: 0.75rem;
}

.info-item {
  display: flex;
  flex-direction: column;
}

.info-label {
  font-size: 0.875rem;
  color: #666;
  margin-bottom: 0.25rem;
}

.info-value {
  font-weight: 500;
}

.info-item.alert {
  padding: 0.75rem;
  background-color: rgba(211, 47, 47, 0.1);
  border-radius: var(--border-radius);
}

.info-item.alert .info-label {
  color: #D32F2F;
}

.simulation-results {
  display: flex;
  flex-direction: column;
  gap: 1.5rem;
}

.result-chart {
  width: 100%;
  height: 300px;
  margin-bottom: 1.5rem;
}

.placeholder-chart {
  width: 100%;
  height: 100%;
  background-color: #f5f5f5;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--border-radius);
  color: #666;
}

.result-metrics {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
}

.metric-card {
  padding: 1rem;
  background-color: #f5f5f5;
  border-radius: var(--border-radius);
}

.metric-card h4 {
  margin-bottom: 0.5rem;
  font-size: 1rem;
}

.metric-value {
  font-size: 1.5rem;
  font-weight: 700;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.metric-value.risk-high {
  color: #D32F2F;
}

.metric-value.risk-medium {
  color: #F57C00;
}

.metric-value.risk-low {
  color: #388E3C;
}

.metric-description {
  font-size: 0.875rem;
  color: #666;
}

.data-visualization {
  margin-top: 1rem;
}

.visualization-tabs {
  display: flex;
  margin-bottom: 1rem;
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
}

.visualization-content {
  height: 400px;
}

.placeholder-visualization {
  width: 100%;
  height: 100%;
  background-color: #f5f5f5;
  display: flex;
  align-items: center;
  justify-content: center;
  border-radius: var(--border-radius);
  color: #666;
}

.breadcrumbs {
  margin-bottom: 0.5rem;
  font-size: 0.875rem;
  color: #666;
}

.breadcrumbs a {
  color: #666;
}

.hash-preview {
  font-family: monospace;
  background-color: #f5f5f5;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  cursor: help;
}

.empty-state {
  padding: 2rem;
  text-align: center;
  color: #666;
}
*/