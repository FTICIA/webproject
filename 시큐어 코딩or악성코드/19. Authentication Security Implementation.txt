const express = require('express');
const router = express.Router();
const jwt = require('jsonwebtoken');
const Joi = require('joi');
const argon2 = require('argon2');
const crypto = require('crypto');
const secureLogger = require('../utils/secureLogger');
const { validateRequest } = require('../middleware/inputValidation');
const { RedisTokenStore } = require('../services/redisTokenStore');
const rateLimit = require('express-rate-limit');
const { sanitizeBody } = require('../middleware/xssProtection');

// Initialize token store
const tokenStore = new RedisTokenStore({
  keyPrefix: 'auth:',
  blacklistPrefix: 'auth:blacklist:'
});

// Validation schemas
const registerSchema = Joi.object({
  username: Joi.string().alphanum().min(3).max(30).required(),
  email: Joi.string().email().required(),
  password: Joi.string().min(10).pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{10,}$/).required(),
  firstName: Joi.string().max(50),
  lastName: Joi.string().max(50),
  role: Joi.string().valid('user', 'doctor', 'admin').default('user')
});

const loginSchema = Joi.object({
  email: Joi.string().email().required(),
  password: Joi.string().required(),
  rememberMe: Joi.boolean().default(false)
});

// Rate limiters
const loginLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 5, // limit each IP to 5 login attempts per windowMs
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    status: 'error',
    message: 'Too many login attempts, please try again later.'
  }
});

// Register route
router.post('/register', 
  sanitizeBody,
  validateRequest(registerSchema),
  async (req, res, next) => {
    try {
      const { username, email, password, firstName, lastName, role } = req.body;
      
      // Check if user already exists (simplified - in real app, check database)
      // const existingUser = await User.findOne({ email });
      // if (existingUser) {
      //   return res.status(409).json({
      //     status: 'error',
      //     message: 'Email is already registered'
      //   });
      // }
      
      // Hash password using Argon2
      const hashedPassword = await argon2.hash(password, {
        type: argon2.argon2id,
        memoryCost: 2 ** 16,
        timeCost: 3,
        parallelism: 2
      });
      
      // Create new user (simplified - in real app, save to database)
      const user = {
        id: crypto.randomUUID(),
        username,
        email,
        password: hashedPassword,
        firstName: firstName || '',
        lastName: lastName || '',
        role,
        createdAt: new Date(),
        updatedAt: new Date(),
        tokenVersion: 0
      };
      
      // Generate activation token
      const activationToken = crypto.randomBytes(32).toString('hex');
      const hashedActivationToken = crypto
        .createHash('sha256')
        .update(activationToken)
        .digest('hex');
      
      // Set token expiry (24 hours)
      const activationExpires = Date.now() + 24 * 60 * 60 * 1000;
      
      // Store token (simplified - in real app, save to database)
      // user.activationToken = hashedActivationToken;
      // user.activationExpires = activationExpires;
      // await user.save();
      
      // Send activation email (simplified)
      // await sendActivationEmail(user.email, activationToken);
      
      // Return success
      res.status(201).json({
        status: 'success',
        message: 'Registration successful. Please check your email to activate your account.',
        userId: user.id
      });
      
      // Log event
      secureLogger.info({
        type: 'USER_REGISTERED',
        userId: user.id,
        email: user.email,
        ip: req.ip
      });
    } catch (error) {
      next(error);
    }
  }
);

// Login route
router.post('/login',
  sanitizeBody,
  loginLimiter,
  validateRequest(loginSchema),
  async (req, res, next) => {
    try {
      const { email, password, rememberMe } = req.body;
      
      // Get user (simplified - in real app, get from database)
      // const user = await User.findOne({ email }).select('+password');
      
      // Simulate user retrieval
      const user = {
        id: '123e4567-e89b-12d3-a456-426614174000',
        email: 'user@example.com',
        password: await argon2.hash('SecureP@ssw0rd'), // Pre-hashed password
        role: 'user',
        tokenVersion: 1
      };
      
      // Check if user exists and is active
      if (!user) {
        // Use constant-time comparison to prevent timing attacks
        await argon2.verify(
          await argon2.hash('dummy-password'),
          password
        );
        
        // Log failed attempt
        secureLogger.securityLog({
          type: 'LOGIN_FAILED',
          reason: 'user_not_found',
          email,
          ip: req.ip
        });
        
        return res.status(401).json({
          status: 'error',
          message: 'Invalid email or password'
        });
      }
      
      // Verify password
      const isPasswordValid = await argon2.verify(user.password, password);
      
      if (!isPasswordValid) {
        // Log failed attempt
        secureLogger.securityLog({
          type: 'LOGIN_FAILED',
          reason: 'invalid_password',
          userId: user.id,
          email,
          ip: req.ip
        });
        
        return res.status(401).json({
          status: 'error',
          message: 'Invalid email or password'
        });
      }
      
      // Generate token ID
      const jwtid = crypto.randomBytes(16).toString('hex');
      
      // Create tokens
      const accessToken = jwt.sign(
        {
          id: user.id,
          role: user.role
        },
        process.env.JWT_SECRET,
        {
          expiresIn: '15m',
          algorithm: 'HS512',
          jwtid,
          audience: process.env.JWT_AUDIENCE,
          issuer: process.env.JWT_ISSUER
        }
      );
      
      const refreshToken = jwt.sign(
        {
          id: user.id,
          tokenVersion: user.tokenVersion
        },
        process.env.JWT_REFRESH_SECRET,
        {
          expiresIn: rememberMe ? '7d' : '1d',
          algorithm: 'HS512',
          jwtid,
          audience: process.env.JWT_AUDIENCE,
          issuer: process.env.JWT_ISSUER
        }
      );
      
      // Store token metadata in Redis
      await tokenStore.storeToken(user.id, jwtid, {
        createdAt: new Date(),
        userAgent: req.headers['user-agent'],
        ip: req.ip
      }, rememberMe ? 7 * 24 * 60 * 60 : 24 * 60 * 60);
      
      // Set cookies
      res.cookie('refreshToken', refreshToken, {
        httpOnly: true,
        secure: process.env.NODE_ENV === 'production',
        sameSite: 'strict',
        maxAge: rememberMe ? 7 * 24 * 60 * 60 * 1000 : 24 * 60 * 60 * 1000 // 7 days or 1 day
      });
      
      // Return tokens
      res.status(200).json({
        status: 'success',
        accessToken,
        expiresIn: 900 // 15 minutes in seconds
      });
      
      // Log successful login
      secureLogger.info({
        type: 'LOGIN_SUCCESS',
        userId: user.id,
        email: user.email,
        ip: req.ip
      });
    } catch (error) {
      next(error);
    }
  }
);

// Refresh token route
router.post('/refresh-token', async (req, res, next) => {
  try {
    // Get refresh token from cookie
    const refreshToken = req.cookies.refreshToken;
    
    if (!refreshToken) {
      return res.status(401).json({
        status: 'error',
        message: 'Refresh token is required'
      });
    }
    
    // Verify refresh token
    let decoded;
    try {
      decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET, {
        algorithms: ['HS512'],
        audience: process.env.JWT_AUDIENCE,
        issuer: process.env.JWT_ISSUER,
        complete: true
      });
    } catch (error) {
      // Log token verification failure
      secureLogger.securityLog({
        type: 'TOKEN_VERIFICATION_FAILED',
        reason: error.message,
        ip: req.ip
      });
      
      return res.status(401).json({
        status: 'error',
        message: 'Invalid refresh token'
      });
    }
    
    // Check if token is revoked
    const isRevoked = await tokenStore.isTokenRevoked(decoded.jti);
    if (isRevoked) {
      // Log token reuse attempt
      secureLogger.securityLog({
        type: 'REVOKED_TOKEN_USE_ATTEMPT',
        userId: decoded.payload.id,
        tokenId: decoded.jti,
        ip: req.ip
      });
      
      return res.status(401).json({
        status: 'error',
        message: 'Token has been revoked'
      });
    }
    
    // Get user (simplified - in real app, get from database)
    // const user = await User.findById(decoded.payload.id);
    
    // Simulate user retrieval
    const user = {
      id: decoded.payload.id,
      role: 'user',
      tokenVersion: decoded.payload.tokenVersion
    };
    
    // Check if user exists
    if (!user) {
      return res.status(401).json({
        status: 'error',
        message: 'User not found'
      });
    }
    
    // Verify token version (to invalidate tokens after password change)
    if (user.tokenVersion !== decoded.payload.tokenVersion) {
      // Log token version mismatch
      secureLogger.securityLog({
        type: 'TOKEN_VERSION_MISMATCH',
        userId: decoded.payload.id,
        tokenVersion: decoded.payload.tokenVersion,
        currentVersion: user.tokenVersion,
        ip: req.ip
      });
      
      return res.status(401).json({
        status: 'error',
        message: 'Token is no longer valid'
      });
    }
    
    // Generate new token ID
    const jwtid = crypto.randomBytes(16).toString('hex');
    
    // Create new tokens
    const accessToken = jwt.sign(
      {
        id: user.id,
        role: user.role
      },
      process.env.JWT_SECRET,
      {
        expiresIn: '15m',
        algorithm: 'HS512',
        jwtid,
        audience: process.env.JWT_AUDIENCE,
        issuer: process.env.JWT_ISSUER
      }
    );
    
    const newRefreshToken = jwt.sign(
      {
        id: user.id,
        tokenVersion: user.tokenVersion
      },
      process.env.JWT_REFRESH_SECRET,
      {
        expiresIn: '1d', // Default to 1 day for refresh
        algorithm: 'HS512',
        jwtid,
        audience: process.env.JWT_AUDIENCE,
        issuer: process.env.JWT_ISSUER
      }
    );
    
    // Revoke old token
    await tokenStore.revokeToken(decoded.jti);
    
    // Store new token metadata
    await tokenStore.storeToken(user.id, jwtid, {
      createdAt: new Date(),
      userAgent: req.headers['user-agent'],
      ip: req.ip
    }, 24 * 60 * 60); // 1 day
    
    // Set cookies
    res.cookie('refreshToken', newRefreshToken, {
      httpOnly: true,
      secure: process.env.NODE_ENV === 'production',
      sameSite: 'strict',
      maxAge: 24 * 60 * 60 * 1000 // 1 day
    });
    
    // Return new access token
    res.status(200).json({
      status: 'success',
      accessToken,
      expiresIn: 900 // 15 minutes in seconds
    });
    
    // Log token refresh
    secureLogger.info({
      type: 'TOKEN_REFRESHED',
      userId: user.id,
      ip: req.ip
    });
  } catch (error) {
    next(error);
  }
});

// Logout route
router.post('/logout', async (req, res, next) => {
  try {
    // Get refresh token from cookie
    const refreshToken = req.cookies.refreshToken;
    
    if (refreshToken) {
      try {
        // Verify token to get its ID
        const decoded = jwt.verify(refreshToken, process.env.JWT_REFRESH_SECRET, {
          algorithms: ['HS512'],
          audience: process.env.JWT_AUDIENCE,
          issuer: process.env.JWT_ISSUER,
          complete: true
        });
        
        // Revoke the token
        await tokenStore.revokeToken(decoded.jti);
        
        // Log logout
        secureLogger.info({
          type: 'USER_LOGOUT',
          userId: decoded.payload.id,
          ip: req.ip
        });
      } catch (error) {
        // Token may be invalid, still clear cookies
        secureLogger.debug({
          type: 'LOGOUT_INVALID_TOKEN',
          error: error.message,
          ip: req.ip
        });
      }
    }
    
    // Clear cookies
    res.clearCookie('refreshToken');
    
    // Return success
    res.status(200).json({
      status: 'success',
      message: 'Logged out successfully'
    });
  } catch (error) {
    next(error);
  }
});

module.exports = router;