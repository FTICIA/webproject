const { ValidationError } = require('joi');
const logger = require('./secureLogger');

// Centralized error handler middleware
const errorHandler = (err, req, res, next) => {
  // Don't expose error details in production
  const isProduction = process.env.NODE_ENV === 'production';
  
  // Default error
  let statusCode = 500;
  let errorResponse = {
    status: 'error',
    message: isProduction ? 'An unexpected error occurred' : err.message
  };
  
  // Log the error with context
  logger.error({
    error: err.message,
    stack: err.stack,
    path: req.path,
    method: req.method,
    requestId: req.id,
    userId: req.user?.id || 'unauthenticated'
  });
  
  // Handle specific error types
  if (err instanceof ValidationError) {
    statusCode = 400;
    errorResponse.message = 'Validation error';
    if (!isProduction) {
      errorResponse.details = err.details.map(detail => ({
        message: detail.message,
        path: detail.path
      }));
    }
  } else if (err.name === 'UnauthorizedError' || err.message.includes('unauthorized')) {
    statusCode = 401;
    errorResponse.message = 'Authentication required';
  } else if (err.name === 'ForbiddenError' || err.message.includes('forbidden')) {
    statusCode = 403;
    errorResponse.message = 'Access denied';
  } else if (err.name === 'NotFoundError' || err.message.includes('not found')) {
    statusCode = 404;
    errorResponse.message = 'Resource not found';
  } else if (err.code === 'ER_DUP_ENTRY') {
    statusCode = 409;
    errorResponse.message = 'Resource already exists';
  } else if (err.name === 'TokenExpiredError') {
    statusCode = 401;
    errorResponse.message = 'Token expired';
  }
  
  // Add request ID for tracking
  errorResponse.requestId = req.id;
  
  // Return sanitized error response
  res.status(statusCode).json(errorResponse);
};

module.exports = errorHandler;