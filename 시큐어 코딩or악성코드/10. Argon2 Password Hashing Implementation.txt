const argon2 = require('argon2');
const crypto = require('crypto');

// Configuration for Argon2 (memory-hard password hashing)
const argon2Options = {
  type: argon2.argon2id, // Combined protection against side-channel and GPU attacks
  memoryCost: 2 ** 16,   // 64 MiB memory usage
  timeCost: 3,           // 3 iterations
  parallelism: 2,        // 2 threads
  hashLength: 32,        // 32 bytes output
};

// Generate a secure random salt
const generateSalt = () => {
  return crypto.randomBytes(16);
};

// Hash a password using Argon2
const hashPassword = async (password) => {
  try {
    // Generate a unique salt for this password
    const salt = generateSalt();
    
    // Add salt to options
    const options = {
      ...argon2Options,
      salt
    };
    
    // Hash the password
    const hash = await argon2.hash(password, options);
    
    return {
      hash,
      salt: salt.toString('hex') // Store salt if needed separately
    };
  } catch (error) {
    console.error('Password hashing error:', error.message);
    throw new Error('Password security processing failed');
  }
};

// Verify a password against its hash
const verifyPassword = async (hashedPassword, providedPassword) => {
  try {
    return await argon2.verify(hashedPassword, providedPassword);
  } catch (error) {
    console.error('Password verification error:', error.message);
    return false;
  }
};

// Securely handle password reset
const createResetToken = async () => {
  try {
    // Generate a secure random token
    const resetToken = crypto.randomBytes(32).toString('hex');
    
    // Hash the token for storage in the database
    const hashedToken = crypto
      .createHash('sha256')
      .update(resetToken)
      .digest('hex');
    
    // Set expiry time (1 hour from now)
    const resetExpires = Date.now() + 3600000;
    
    return {
      resetToken,       // Send to user's email
      hashedToken,      // Store in database
      resetExpires      // Store in database
    };
  } catch (error) {
    console.error('Reset token generation error:', error.message);
    throw new Error('Reset token generation failed');
  }
};

// Verify reset token
const verifyResetToken = (hashedTokenFromDB, providedToken, expiryTime) => {
  try {
    // Check if token has expired
    if (Date.now() > expiryTime) {
      return {
        valid: false,
        reason: 'expired'
      };
    }
    
    // Hash the provided token
    const hashedProvidedToken = crypto
      .createHash('sha256')
      .update(providedToken)
      .digest('hex');
    
    // Constant-time comparison to prevent timing attacks
    const isValid = crypto.timingSafeEqual(
      Buffer.from(hashedTokenFromDB, 'hex'),
      Buffer.from(hashedProvidedToken, 'hex')
    );
    
    return {
      valid: isValid,
      reason: isValid ? null : 'invalid'
    };
  } catch (error) {
    console.error('Reset token verification error:', error.message);
    return {
      valid: false,
      reason: 'verification-error'
    };
  }
};

module.exports = {
  hashPassword,
  verifyPassword,
  createResetToken,
  verifyResetToken
};