const mysql = require('mysql2/promise');
const config = require('../config/database');

// Create a secure database connection pool
const pool = mysql.createPool({
  host: config.host,
  user: config.user,
  password: config.password,
  database: config.database,
  waitForConnections: true,
  connectionLimit: 10,
  queueLimit: 0,
  ssl: {
    rejectUnauthorized: true
  }
});

// Secure query execution using parameterized queries
const executeQuery = async (sql, params = []) => {
  let connection;
  try {
    connection = await pool.getConnection();
    const [results] = await connection.execute(sql, params);
    return results;
  } catch (error) {
    console.error('Database query error:', error.message);
    throw new Error('Database operation failed');
  } finally {
    if (connection) connection.release();
  }
};

// Example of secure patient data retrieval
const getPatientById = async (patientId) => {
  // Using parameterized query to prevent SQL injection
  const query = `
    SELECT patient_id, first_name, last_name, date_of_birth, medical_history
    FROM patients
    WHERE patient_id = ?
  `;
  
  return await executeQuery(query, [patientId]);
};

// Example of secure drug interaction data retrieval
const getDrugInteractions = async (drugId1, drugId2) => {
  const query = `
    SELECT d1.name AS drug1, d2.name AS drug2, 
           i.interaction_type, i.severity, i.description 
    FROM drug_interactions i
    JOIN drugs d1 ON i.drug_id_1 = d1.drug_id
    JOIN drugs d2 ON i.drug_id_2 = d2.drug_id
    WHERE (i.drug_id_1 = ? AND i.drug_id_2 = ?)
       OR (i.drug_id_1 = ? AND i.drug_id_2 = ?)
  `;
  
  return await executeQuery(query, [drugId1, drugId2, drugId2, drugId1]);
};

// Secure database transaction example
const prescribeMedication = async (patientId, doctorId, medicationId, dosage, frequency) => {
  let connection;
  try {
    connection = await pool.getConnection();
    
    // Begin transaction
    await connection.beginTransaction();
    
    // Check for patient allergies
    const [allergies] = await connection.execute(
      `SELECT medication_id FROM patient_allergies WHERE patient_id = ?`,
      [patientId]
    );
    
    // Check if patient is allergic to the medication
    const isAllergic = allergies.some(allergy => allergy.medication_id === medicationId);
    if (isAllergic) {
      throw new Error('Patient is allergic to this medication');
    }
    
    // Check for potential drug interactions
    const [currentMedications] = await connection.execute(
      `SELECT medication_id FROM current_prescriptions WHERE patient_id = ? AND active = 1`,
      [patientId]
    );
    
    // Check interactions (simplified)
    for (const med of currentMedications) {
      const [interactions] = await connection.execute(
        `SELECT severity FROM drug_interactions 
         WHERE (drug_id_1 = ? AND drug_id_2 = ?) OR (drug_id_1 = ? AND drug_id_2 = ?)`,
        [med.medication_id, medicationId, medicationId, med.medication_id]
      );
      
      if (interactions.length > 0 && interactions[0].severity === 'HIGH') {
        throw new Error('Potentially dangerous drug interaction detected');
      }
    }
    
    // Insert prescription
    const [result] = await connection.execute(
      `INSERT INTO prescriptions (patient_id, doctor_id, medication_id, dosage, frequency, prescribed_date)
       VALUES (?, ?, ?, ?, ?, NOW())`,
      [patientId, doctorId, medicationId, dosage, frequency]
    );
    
    // Update current prescriptions
    await connection.execute(
      `INSERT INTO current_prescriptions (prescription_id, patient_id, medication_id, active)
       VALUES (?, ?, ?, 1)`,
      [result.insertId, patientId, medicationId]
    );
    
    // Commit transaction
    await connection.commit();
    
    return { success: true, prescriptionId: result.insertId };
  } catch (error) {
    if (connection) {
      await connection.rollback();
    }
    console.error('Prescription error:', error.message);
    throw error;
  } finally {
    if (connection) {
      connection.release();
    }
  }
};

module.exports = {
  getPatientById,
  getDrugInteractions,
  prescribeMedication,
  executeQuery
};