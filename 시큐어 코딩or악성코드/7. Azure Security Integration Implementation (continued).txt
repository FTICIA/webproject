const { DefaultAzureCredential } = require('@azure/identity');
const { KeyClient } = require('@azure/keyvault-keys');
const { SecretClient } = require('@azure/keyvault-secrets');
const { CryptographyClient } = require('@azure/keyvault-keys');
const secureLogger = require('./secureLogger');

// Configure Azure clients
const credential = new DefaultAzureCredential();
const keyVaultUrl = process.env.AZURE_KEYVAULT_URL;
const keyClient = new KeyClient(keyVaultUrl, credential);
const secretClient = new SecretClient(keyVaultUrl, credential);

// Retrieve a secret securely from Azure Key Vault
async function getSecret(secretName) {
  try {
    const secret = await secretClient.getSecret(secretName);
    return secret.value;
  } catch (error) {
    secureLogger.error({
      message: 'Failed to retrieve secret from Azure Key Vault',
      secretName,error: error.message
    });
    throw new Error('Secret retrieval failed');
  }
}

// Encrypt sensitive data using Azure Key Vault key
async function encryptData(keyName, data) {
  try {
    // Get key from Azure Key Vault
    const key = await keyClient.getKey(keyName);
    
    // Create cryptography client
    const cryptographyClient = new CryptographyClient(key, credential);
    
    // Convert data to appropriate format
    const buffer = Buffer.from(JSON.stringify(data));
    
    // Encrypt the data
    const encryptResult = await cryptographyClient.encrypt({
      algorithm: "RSA-OAEP-256",
      plaintext: buffer
    });
    
    return {
      keyName,
      algorithm: encryptResult.algorithm,
      ciphertext: encryptResult.ciphertext.toString('base64')
    };
  } catch (error) {
    secureLogger.error({
      message: 'Failed to encrypt data using Azure Key Vault',
      keyName,
      error: error.message
    });
    throw new Error('Encryption failed');
  }
}

// Decrypt sensitive data using Azure Key Vault key
async function decryptData(keyName, encryptedData) {
  try {
    // Get key from Azure Key Vault
    const key = await keyClient.getKey(keyName);
    
    // Create cryptography client
    const cryptographyClient = new CryptographyClient(key, credential);
    
    // Decrypt the data
    const decryptResult = await cryptographyClient.decrypt({
      algorithm: encryptedData.algorithm,
      ciphertext: Buffer.from(encryptedData.ciphertext, 'base64')
    });
    
    // Parse the decrypted data
    return JSON.parse(decryptResult.plaintext.toString());
  } catch (error) {
    secureLogger.error({
      message: 'Failed to decrypt data using Azure Key Vault',
      keyName,
      error: error.message
    });
    throw new Error('Decryption failed');
  }
}

// Configure application with secrets from Azure Key Vault
async function configureAppWithSecrets() {
  try {
    // Retrieve required secrets
    const dbConnectionString = await getSecret('db-connection-string');
    const jwtSecret = await getSecret('jwt-secret');
    const apiKeys = await getSecret('api-keys');
    
    // Apply secrets to application configuration
    process.env.DB_CONNECTION_STRING = dbConnectionString;
    process.env.JWT_SECRET = jwtSecret;
    process.env.API_KEYS = apiKeys;
    
    secureLogger.info('Successfully loaded secrets from Azure Key Vault');
    return true;
  } catch (error) {
    secureLogger.error({
      message: 'Failed to configure application with secrets',
      error: error.message
    });
    throw new Error('Application configuration failed');
  }
}

module.exports = {
  getSecret,
  encryptData,
  decryptData,
  configureAppWithSecrets
};