/**
 * Main application entry point with comprehensive security setup
 */
const express = require('express');
const helmet = require('helmet');
const compression = require('compression');
const cookieParser = require('cookie-parser');
const rateLimit = require('express-rate-limit');
const mongoSanitize = require('express-mongo-sanitize');
const hpp = require('hpp');
const cors = require('cors');
const path = require('path');
const secureLogger = require('./utils/secureLogger');
const errorHandler = require('./middleware/errorHandler');
const { sanitizeBody, sanitizeParams, setSecurityHeaders } = require('./middleware/xssProtection');
const CSRFProtection = require('./middleware/csrfProtection');
const fluidSecurityMiddleware = require('./middleware/fluidSecurityMiddleware');
const VorticitySecurityMiddleware = require('./middleware/vorticitySecurityMiddleware');
const azureKeyVault = require('./services/azureKeyVault');
const authRoutes = require('./routes/authRoutes');
const userRoutes = require('./routes/userRoutes');
const medicalRoutes = require('./routes/medicalRoutes');
const drugRoutes = require('./routes/drugRoutes');
const simulationRoutes = require('./routes/simulationRoutes');

// Initialize application
const app = express();

// Trust proxy settings (for proper IP detection behind load balancers)
app.set('trust proxy', 1);

// Configure app settings
app.disable('x-powered-by');
app.set('env', process.env.NODE_ENV || 'development');
app.set('port', process.env.PORT || 3000);

// Load secrets from Azure Key Vault in production
if (process.env.NODE_ENV === 'production') {
  azureKeyVault.configureAppWithSecrets()
    .then(() => {
      secureLogger.info('Loaded secrets from Azure Key Vault');
    })
    .catch(err => {
      secureLogger.error('Failed to load secrets from Azure Key Vault', err);
      process.exit(1);
    });
}

// Global middleware
app.use(helmet()); // Security headers
app.use(compression()); // Response compression
app.use(express.json({ limit: '100kb' })); // Body parser with size limit
app.use(express.urlencoded({ extended: true, limit: '100kb' }));
app.use(cookieParser(process.env.COOKIE_SECRET)); // Cookie parser with secret
app.use(mongoSanitize()); // Prevent MongoDB injection
app.use(hpp()); // Prevent HTTP parameter pollution

// CORS configuration
const corsOptions = {
  origin: process.env.CORS_ORIGINS ? process.env.CORS_ORIGINS.split(',') : '*',
  methods: 'GET,HEAD,PUT,PATCH,POST,DELETE',
  preflightContinue: false,
  optionsSuccessStatus: 204,
  credentials: true,
  maxAge: 86400 // 24 hours
};
app.use(cors(corsOptions));

// XSS protection
app.use(sanitizeBody);
app.use(sanitizeParams);
app.use(setSecurityHeaders);

// CSRF protection
const csrfProtection = new CSRFProtection({
  cookieName: '_csrf',
  headerName: 'X-CSRF-Token',
  cookieOptions: {
    maxAge: 3600000, // 1 hour
    secure: process.env.NODE_ENV === 'production'
  }
});
app.use(csrfProtection.setToken());

// Rate limiting
const generalLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 100, // limit each IP to 100 requests per windowMs
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    status: 'error',
    message: 'Too many requests, please try again later.'
  }
});
app.use('/api/', generalLimiter);

// Stricter rate limiting for auth routes
const authLimiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 10, // limit each IP to 10 requests per windowMs
  standardHeaders: true,
  legacyHeaders: false,
  message: {
    status: 'error',
    message: 'Too many authentication attempts, please try again later.'
  }
});
app.use('/api/auth/', authLimiter);

// Fluid security middleware (Navier-Stokes based)
app.use(fluidSecurityMiddleware);

// Vorticity security middleware (advanced flow analysis)
const vorticityMiddleware = new VorticitySecurityMiddleware({
  mode: process.env.SECURITY_MODE || 'detection'
});
app.use(vorticityMiddleware.getMiddleware());

// Routes
app.use('/api/auth', authRoutes);
app.use('/api/users', csrfProtection.verifyToken(), userRoutes);
app.use('/api/medical', csrfProtection.verifyToken(), medicalRoutes);
app.use('/api/drugs', csrfProtection.verifyToken(), drugRoutes);
app.use('/api/simulations', csrfProtection.verifyToken(), simulationRoutes);

// Serve static assets in production
if (process.env.NODE_ENV === 'production') {
  app.use(express.static(path.join(__dirname, 'public')));
  
  // Serve SPA
  app.get('*', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
  });
}

// Global error handler
app.use(errorHandler);

// Start server
const server = app.listen(app.get('port'), () => {
  secureLogger.info(`Server listening on port ${app.get('port')} in ${app.get('env')} mode`);
});

// Handle unhandled rejections
process.on('unhandledRejection', (err) => {
  secureLogger.error('Unhandled Rejection:', err);
  // Don't crash in production, but log extensively
  if (process.env.NODE_ENV !== 'production') {
    console.error('UNHANDLED REJECTION! Shutting down...');
    server.close(() => {
      process.exit(1);
    });
  }
});

// Handle uncaught exceptions
process.on('uncaughtException', (err) => {
  secureLogger.error('Uncaught Exception:', err);
  // Always crash on uncaught exceptions (unsafe state)
  console.error('UNCAUGHT EXCEPTION! Shutting down...');
  server.close(() => {
    process.exit(1);
  });
});

// Graceful shutdown
process.on('SIGTERM', () => {
  secureLogger.info('SIGTERM received. Shutting down gracefully');
  server.close(() => {
    secureLogger.info('Process terminated');
  });
});

module.exports = app;