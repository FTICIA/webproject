const express = require('express');
const Joi = require('joi');
const router = express.Router();

// Create comprehensive validation schemas
const userSchema = Joi.object({
  username: Joi.string().alphanum().min(3).max(30).required()
    .pattern(/^[a-zA-Z0-9_]+$/)
    .message('Username must only contain alphanumeric characters and underscores'),
  
  email: Joi.string().email({ minDomainSegments: 2 }).required()
    .max(254)
    .pattern(/^[\w-\.]+@([\w-]+\.)+[\w-]{2,}$/)
    .message('Email must be a valid email address'),
  
  password: Joi.string()
    .pattern(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{10,}$/)
    .message('Password must be at least 10 characters long and contain uppercase, lowercase, number, and special character')
    .required(),
  
  birthDate: Joi.date().less('now').greater('1900-01-01'),
  
  role: Joi.string().valid('user', 'admin', 'moderator').default('user')
});

// Middleware for validating request inputs
const validateRequest = (schema, property = 'body') => {
  return (req, res, next) => {
    const { error, value } = schema.validate(req[property], {
      abortEarly: false,
      stripUnknown: true
    });
    
    if (error) {
      const errorDetails = error.details.map(detail => ({
        message: detail.message,
        path: detail.path,
        type: detail.type
      }));
      
      return res.status(400).json({
        status: 'error',
        message: 'Invalid input data',
        details: errorDetails
      });
    }
    
    // Replace potentially tainted data with validated data
    req[property] = value;
    next();
  };
};

// Register route with validation
router.post('/register', validateRequest(userSchema), async (req, res) => {
  try {
    // User data has already been validated
    const userData = req.body;
    
    // Process the registration
    // ...
    
    res.status(201).json({
      status: 'success',
      message: 'User registered successfully'
    });
  } catch (error) {
    res.status(500).json({
      status: 'error',
      message: 'Internal server error'
    });
  }
});

module.exports = router;