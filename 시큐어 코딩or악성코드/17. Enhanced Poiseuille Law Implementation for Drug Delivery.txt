/**
 * Enhanced Poiseuille Law Implementation for Medical Fluid Dynamics Security
 * This module implements mathematical models for analyzing fluid flow behavior
 * in medical contexts, including drug delivery and blood flow patterns.
 */

class EnhancedPoiseuilleLaw {
  constructor(options = {}) {
    // Physical constants
    this.fluidViscosity = options.fluidViscosity || 0.004; // Pa·s (blood viscosity)
    this.gravity = options.gravity || 9.81; // m/s²
    this.pipeLength = options.pipeLength || 0.1; // meters
    this.density = options.density || 1060; // kg/m³ (blood density)
    
    // Security thresholds
    this.maxReynoldsNumber = options.maxReynoldsNumber || 2000; // Transition to turbulence
    this.maxPressureDrop = options.maxPressureDrop || 5000; // Pa
    this.maxFlowRate = options.maxFlowRate || 1e-6; // m³/s
    
    // Advanced modeling parameters
    this.nonNewtonianFactor = options.nonNewtonianFactor || 0.9; // Blood is non-Newtonian
    this.pulsatileFactor = options.pulsatileFactor || 0.8; // Factor for pulsatile flow
    this.complexityFactor = options.complexityFactor || 1.5; // For complex geometries
    
    // Initialize validation data
    this.validationData = new Map();
  }
  
  /**
   * Calculate pressure drop using the enhanced Poiseuille Law
   * Δp = (8 * μ * L * Q) / (π * r⁴) * [complexity factors]
   */
  calculatePressureDrop(radius, flowRate) {
    // Validate inputs
    this.validateInputs('radius', radius);
    this.validateInputs('flowRate', flowRate);
    
    // Basic Poiseuille equation
    const basicPressureDrop = (8 * this.fluidViscosity * this.pipeLength * flowRate) / 
                              (Math.PI * Math.pow(radius, 4));
    
    // Apply enhancement factors
    const enhancedPressureDrop = basicPressureDrop * 
                                 this.nonNewtonianFactor * 
                                 this.pulsatileFactor * 
                                 this.complexityFactor;
    
    // Security check
    if (enhancedPressureDrop > this.maxPressureDrop) {
      throw new Error('Pressure drop exceeds safety threshold');
    }
    
    return enhancedPressureDrop;
  }
  
  /**
   * Calculate flow rate using the enhanced Poiseuille Law
   * Q = (π * r⁴ * Δp) / (8 * μ * L) * [complexity factors]
   */
  calculateFlowRate(radius, pressureDrop) {
    // Validate inputs
    this.validateInputs('radius', radius);
    this.validateInputs('pressureDrop', pressureDrop);
    
    // Basic Poiseuille equation
    const basicFlowRate = (Math.PI * Math.pow(radius, 4) * pressureDrop) / 
                          (8 * this.fluidViscosity * this.pipeLength);
    
    // Apply enhancement factors
    const enhancedFlowRate = basicFlowRate / 
                             (this.nonNewtonianFactor * 
                              this.pulsatileFactor * 
                              this.complexityFactor);
    
    // Security check
    if (enhancedFlowRate > this.maxFlowRate) {
      throw new Error('Flow rate exceeds safety threshold');
    }
    
    return enhancedFlowRate;
  }
  
  /**
   * Calculate Reynolds number to determine flow regime
   * Re = (ρ * v * D) / μ
   */
  calculateReynoldsNumber(radius, flowRate) {
    // Validate inputs
    this.validateInputs('radius', radius);
    this.validateInputs('flowRate', flowRate);
    
    // Calculate velocity
    const area = Math.PI * Math.pow(radius, 2);
    const velocity = flowRate / area;
    
    // Calculate Reynolds number
    const diameter = 2 * radius;
    const reynoldsNumber = (this.density * velocity * diameter) / this.fluidViscosity;
    
    // Security check
    if (reynoldsNumber > this.maxReynoldsNumber) {
      throw new Error('Reynolds number indicates turbulent flow, which may be unsafe');
    }
    
    return reynoldsNumber;
  }
  
  /**
   * Calculate wall shear stress
   * τ = (4 * μ * Q) / (π * r³)
   */
  calculateWallShearStress(radius, flowRate) {
    // Validate inputs
    this.validateInputs('radius', radius);
    this.validateInputs('flowRate', flowRate);
    
    // Calculate wall shear stress
    const wallShearStress = (4 * this.fluidViscosity * flowRate) / 
                            (Math.PI * Math.pow(radius, 3));
    
    return wallShearStress;
  }
  
  /**
   * Calculate oscillatory shear index (OSI) for pulsatile flow
   * OSI = 0.5 * (1 - |∫τ dt| / ∫|τ| dt)
   */
  calculateOscillatoryShearIndex(shearStressHistory) {
    if (!Array.isArray(shearStressHistory) || shearStressHistory.length < 2) {
      throw new Error('Shear stress history must be an array with at least 2 values');
    }
    
    // Calculate time-averaged shear stress magnitude
    let sumMagnitude = 0;
    let sumVector = 0;
    
    for (const stress of shearStressHistory) {
      sumMagnitude += Math.abs(stress);
      sumVector += stress;
    }
    
    // Calculate OSI
    const osi = 0.5 * (1 - Math.abs(sumVector) / sumMagnitude);
    
    return osi;
  }
  
  /**
   * Calculate the effective diffusion coefficient for drug delivery
   * Deff = D0 * (1 + Pe²/192) for laminar flow
   */
  calculateEffectiveDiffusion(radius, flowRate, molecularDiffusivity) {
    // Validate inputs
    this.validateInputs('radius', radius);
    this.validateInputs('flowRate', flowRate);
    this.validateInputs('molecularDiffusivity', molecularDiffusivity);
    
    // Calculate velocity
    const area = Math.PI * Math.pow(radius, 2);
    const velocity = flowRate / area;
    
    // Calculate Peclet number (ratio of convection to diffusion)
    const pecletNumber = (velocity * 2 * radius) / molecularDiffusivity;
    
    // Calculate effective diffusion coefficient
    const effectiveDiffusion = molecularDiffusivity * (1 + Math.pow(pecletNumber, 2) / 192);
    
    return effectiveDiffusion;
  }
  
  /**
   * Calculate the concentration profile based on convection-diffusion equation
   * ∂c/∂t + v·∇c = D∇²c
   */
  calculateConcentrationProfile(initialConcentration, radius, flowRate, diffusivity, distance, time) {
    // Validate inputs
    this.validateInputs('initialConcentration', initialConcentration);
    this.validateInputs('radius', radius);
    this.validateInputs('flowRate', flowRate);
    this.validateInputs('diffusivity', diffusivity);
    this.validateInputs('distance', distance);
    this.validateInputs('time', time);
    
    // Calculate velocity
    const area = Math.PI * Math.pow(radius, 2);
    const velocity = flowRate / area;
    
    // Calculate effective diffusion
    const effectiveDiffusion = this.calculateEffectiveDiffusion(radius, flowRate, diffusivity);
    
    // Simplified analytical solution for 1D convection-diffusion
    // c(x,t) = c₀ * exp[-(x - vt)²/(4Dt)]
    const concentrationAtPoint = initialConcentration * 
                                 Math.exp(-Math.pow(distance - velocity * time, 2) / 
                                         (4 * effectiveDiffusion * time));
    
    return concentrationAtPoint;
  }
  
  /**
   * Calculate drug delivery efficacy based on target concentration
   */
  calculateDeliveryEfficacy(targetConcentration, actualConcentration) {
    // Validate inputs
    this.validateInputs('targetConcentration', targetConcentration);
    this.validateInputs('actualConcentration', actualConcentration);
    
    // Calculate delivery efficacy as percentage of target
    const efficacy = (actualConcentration / targetConcentration) * 100;
    
    return Math.min(100, efficacy); // Cap at 100%
  }
  
  /**
   * Validate inputs to prevent calculation errors or malicious inputs
   */
  validateInputs(paramName, value) {
    // Check for defined values
    if (value === undefined || value === null) {
      throw new Error(`${paramName} cannot be null or undefined`);
    }
    
    // Check for numeric values
    if (typeof value !== 'number' || isNaN(value)) {
      throw new Error(`${paramName} must be a valid number`);
    }
    
    // Check for finite values (not Infinity)
    if (!isFinite(value)) {
      throw new Error(`${paramName} must be finite`);
    }
    
    // Parameter-specific validations
    switch(paramName) {
      case 'radius':
        if (value <= 0 || value > 0.1) { // 10cm max radius is reasonable
          throw new Error('Radius must be positive and less than 0.1m');
        }
        break;
      case 'flowRate':
        if (value < 0 || value > this.maxFlowRate) {
          throw new Error(`Flow rate must be between 0 and ${this.maxFlowRate}m³/s`);
        }
        break;
      case 'pressureDrop':
        if (value < 0 || value > this.maxPressureDrop) {
          throw new Error(`Pressure drop must be between 0 and ${this.maxPressureDrop}Pa`);
        }
        break;
      case 'diffusivity':
        if (value <= 0) {
          throw new Error('Diffusivity must be positive');
        }
        break;
      case 'distance':
      case 'time':
        if (value < 0) {
          throw new Error(`${paramName} cannot be negative`);
        }
        break;
      case 'initialConcentration':
      case 'targetConcentration':
      case 'actualConcentration':
        if (value < 0) {
          throw new Error(`${paramName} cannot be negative`);
        }
        break;
    }
    
    // Record validation for audit
    this.recordValidation(paramName, value);
    
    return true;
  }
  
  /**
   * Record parameter validations for security auditing
   */
  recordValidation(paramName, value) {
    const timestamp = new Date().toISOString();
    
    if (!this.validationData.has(paramName)) {
      this.validationData.set(paramName, []);
    }
    
    const history = this.validationData.get(paramName);
    history.push({
      timestamp,
      value,
      isValid: true
    });
    
    // Keep history limited to last 100 entries
    if (history.length > 100) {
      history.shift();
    }
  }
}

module.exports = EnhancedPoiseuilleLaw;