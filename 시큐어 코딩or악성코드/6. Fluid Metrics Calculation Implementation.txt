const crypto = require('crypto');

// Constants for fluid metric calculations
const FLUID_CONSTANTS = {
  KINEMATIC_VISCOSITY: 1.5, // Adjusted for HTTP traffic
  DENSITY_FACTOR: 2.5,     // Higher density for sensitive paths
  CHARACTERISTIC_LENGTH: 10 // Base path complexity value
};

// Calculate Reynolds number based on traffic patterns
// Reynolds number = (velocity * characteristic length) / kinematic viscosity
const calculateReynoldsNumber = (ipCount, pathCount, uaCount) => {
  // Calculate "velocity" of requests (rate of requests)
  const velocity = Math.sqrt(Math.pow(ipCount, 2) + Math.pow(pathCount, 2));
  
  // Adjust characteristic length based on path count (path complexity)
  const characteristicLength = FLUID_CONSTANTS.CHARACTERISTIC_LENGTH * 
                               (1 + Math.log10(Math.max(pathCount, 1)));
  
  // Calculate Reynolds number
  const reynoldsNumber = (velocity * characteristicLength) / FLUID_CONSTANTS.KINEMATIC_VISCOSITY;
  
  return reynoldsNumber;
};

// Calculate vorticity (rotation of flow) for a request
// Vorticity indicates how much "spin" or deviation from normal patterns exists
const calculateVorticity = (req, reynoldsNumber) => {
  // Create a hash of the usual request pattern
  const patternString = `${req.method}|${req.path}|${req.headers['user-agent'] || ''}`;
  const patternHash = crypto.createHash('md5').update(patternString).digest('hex');
  
  // Calculate a normalized hash value between 0-1
  const normalizedHash = parseInt(patternHash.substring(0, 8), 16) / 0xffffffff;
  
  // Calculate base vorticity from the hash
  let vorticity = normalizedHash * 0.5; // Base random component
  
  // Add impact of Reynolds number - higher Reynolds means more potential for vorticity
  if (reynoldsNumber > 1000) {
    vorticity += 0.2 * Math.min(1, (reynoldsNumber - 1000) / 4000);
  }
  
  // Check for unusual header patterns that might indicate scanning/probing
  const securityHeaders = ['x-forwarded-for', 'x-real-ip', 'forwarded'];
  let suspiciousHeaderCount = 0;
  
  for (const header of securityHeaders) {
    if (req.headers[header]) {
      suspiciousHeaderCount++;
    }
  }
  
  // Unusual combination of headers increases vorticity
  vorticity += suspiciousHeaderCount * 0.1;
  
  // Check for anomalies in query parameters
  if (req.query) {
    const queryKeys = Object.keys(req.query);
    
    // Check for SQL injection attempts in query parameters
    const sqlInjectionPatterns = ['select', 'union', 'drop', 'from ', 'where ', '--', '\'', '"'];
    for (const key of queryKeys) {
      const value = req.query[key];
      if (typeof value === 'string') {
        const lowerValue = value.toLowerCase();
        for (const pattern of sqlInjectionPatterns) {
          if (lowerValue.includes(pattern)) {
            vorticity += 0.3; // Significant increase for potential SQL injection
            break;
          }
        }
      }
    }
    
    // Unusual number of parameters can indicate fuzzing/scanning
    if (queryKeys.length > 10) {
      vorticity += 0.1;
    }
  }
  
  // Check path for typical attack patterns
  const suspiciousPathPatterns = [
    'admin', 'shell', 'cmd', 'config', 'backup', 'wp-', 'phpmy', 
    '.git', '.env', '.ssh', '../', 'passwd'
  ];
  
  for (const pattern of suspiciousPathPatterns) {
    if (req.path.toLowerCase().includes(pattern)) {
      vorticity += 0.2;
      break;
    }
  }
  
  // Normalize vorticity to [0,1] range
  return Math.min(1, Math.max(0, vorticity));
};

// Analyze pattern to detect anomalies
const detectAnomalies = (requestHistory, currentRequest) => {
  // Skip if insufficient history
  if (requestHistory.length < 10) {
    return { anomalyScore: 0, reasons: [] };
  }
  
  const anomalies = [];
  let anomalyScore = 0;
  
  // Check for sudden velocity changes
  const avgVelocity = requestHistory.slice(-5).reduce((sum, req) => sum + req.velocity, 0) / 5;
  if (currentRequest.velocity > avgVelocity * 3) {
    anomalyScore += 0.3;
    anomalies.push('velocity_spike');
  }
  
  // Check for pattern changes
  const pathDistribution = {};
  requestHistory.forEach(req => {
    pathDistribution[req.path] = (pathDistribution[req.path] || 0) + 1;
  });
  
  // Check if current path is rare in history
  const currentPathCount = pathDistribution[currentRequest.path] || 0;
  if (currentPathCount === 0 && requestHistory.length > 20) {
    anomalyScore += 0.2;
    anomalies.push('unusual_path');
  }
  
  // Method distribution (POST vs GET ratio changes)
  const postRequests = requestHistory.filter(r => r.method === 'POST').length;
  const postRatio = postRequests / requestHistory.length;
  
  if (currentRequest.method === 'POST' && postRatio < 0.1) {
    anomalyScore += 0.2;
    anomalies.push('unusual_post');
  }
  
  return {
    anomalyScore,
    reasons: anomalies
  };
};

module.exports = {
  calculateReynoldsNumber,
  calculateVorticity,
  detectAnomalies,
  FLUID_CONSTANTS
};