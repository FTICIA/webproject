const jwt = require('jsonwebtoken');
const crypto = require('crypto');

// Generate a strong secret key
const generateSecretKey = () => {
  return crypto.randomBytes(64).toString('hex');
};

// Store this securely, ideally in environment variables or Azure Key Vault
const JWT_SECRET = process.env.JWT_SECRET || generateSecretKey();
const JWT_REFRESH_SECRET = process.env.JWT_REFRESH_SECRET || generateSecretKey();

// JWT token generation with security best practices
const generateTokens = (userData) => {
  // Remove sensitive data
  const sanitizedUser = {
    id: userData.id,
    role: userData.role,
    permissions: userData.permissions
  };

  // Short-lived access token (15 minutes)
  const accessToken = jwt.sign(sanitizedUser, JWT_SECRET, {
    expiresIn: '15m',
    algorithm: 'HS512',
    jwtid: crypto.randomBytes(16).toString('hex'),
    audience: process.env.JWT_AUDIENCE,
    issuer: process.env.JWT_ISSUER
  });

  // Longer-lived refresh token (7 days)
  const refreshToken = jwt.sign(
    { id: userData.id, tokenVersion: userData.tokenVersion || 0 },
    JWT_REFRESH_SECRET,
    {
      expiresIn: '7d',
      algorithm: 'HS512',
      jwtid: crypto.randomBytes(16).toString('hex'),
      audience: process.env.JWT_AUDIENCE,
      issuer: process.env.JWT_ISSUER
    }
  );

  return { accessToken, refreshToken };
};

// Token verification with all security checks
const verifyToken = (token) => {
  try {
    return jwt.verify(token, JWT_SECRET, {
      algorithms: ['HS512'],
      audience: process.env.JWT_AUDIENCE,
      issuer: process.env.JWT_ISSUER,
      complete: true
    });
  } catch (error) {
    console.error('Token verification failed:', error.message);
    return null;
  }
};

// Token rotation implementation
const rotateTokens = async (refreshToken, tokenRepository) => {
  try {
    const decoded = jwt.verify(refreshToken, JWT_REFRESH_SECRET, {
      algorithms: ['HS512'],
      audience: process.env.JWT_AUDIENCE,
      issuer: process.env.JWT_ISSUER,
      complete: true
    });
    
    // Check if token has been revoked
    const isRevoked = await tokenRepository.isTokenRevoked(decoded.payload.jti);
    if (isRevoked) {
      throw new Error('Token has been revoked');
    }
    
    // Get user data
    const user = await getUserById(decoded.payload.id);
    
    // Verify token version to prevent use of old refresh tokens
    if (user.tokenVersion !== decoded.payload.tokenVersion) {
      throw new Error('Token version mismatch');
    }
    
    // Generate new tokens
    return generateTokens(user);
  } catch (error) {
    console.error('Refresh token rotation failed:', error.message);
    throw new Error('Invalid refresh token');
  }
};

module.exports = {
  generateTokens,
  verifyToken,
  rotateTokens
};