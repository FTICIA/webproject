const redis = require('redis');
const { promisify } = require('util');
const { RateLimiterRedis, RateLimiterMemory } = require('rate-limiter-flexible');
const secureLogger = require('./secureLogger');

// Initialize Redis client for rate limiting
let redisClient;
let rateLimiter;

try {
  redisClient = redis.createClient({
    host: process.env.REDIS_HOST,
    port: process.env.REDIS_PORT,
    password: process.env.REDIS_PASSWORD,
    tls: process.env.NODE_ENV === 'production' ? {} : undefined,
    enable_offline_queue: false
  });
  
  redisClient.on('error', (err) => {
    secureLogger.error('Redis rate limiter error:', err);
    setupMemoryRateLimiter();
  });
  
  // Set up Redis rate limiter
  rateLimiter = new RateLimiterRedis({
    storeClient: redisClient,
    keyPrefix: 'ratelimit',
    points: 100, // Number of points
    duration: 60, // Per 60 seconds
  });
  
  secureLogger.info('Redis rate limiter initialized');
} catch (err) {
  secureLogger.error('Redis connection failed, using memory rate limiter');
  setupMemoryRateLimiter();
}

// Fallback to in-memory rate limiter if Redis is unavailable
function setupMemoryRateLimiter() {
  rateLimiter = new RateLimiterMemory({
    points: 50, // Reduce points for memory limiter
    duration: 60, // Per 60 seconds
  });
}

// Different rate limit configurations
const limiters = {
  // Standard API rate limiter
  standard: new RateLimiterRedis({
    storeClient: redisClient,
    keyPrefix: 'ratelimit:standard',
    points: 100,
    duration: 60,
  }),
  
  // Authentication endpoints rate limiter (stricter)
  auth: new RateLimiterRedis({
    storeClient: redisClient,
    keyPrefix: 'ratelimit:auth',
    points: 10,
    duration: 60,
    blockDuration: 300, // Block for 5 minutes after exceeding limit
  }),
  
  // Public endpoints rate limiter (more permissive)
  public: new RateLimiterRedis({
    storeClient: redisClient,
    keyPrefix: 'ratelimit:public',
    points: 500,
    duration: 60,
  }),
  
  // Administrative endpoints rate limiter (very strict)
  admin: new RateLimiterRedis({
    storeClient: redisClient,
    keyPrefix: 'ratelimit:admin',
    points: 30,
    duration: 60,
    blockDuration: 600, // Block for 10 minutes after exceeding limit
  })
};

// Middleware factory that applies appropriate rate limits
const createRateLimiter = (type = 'standard') => {
  const limiter = limiters[type] || limiters.standard;
  
  return async (req, res, next) => {
    try {
      // Get client identifier (IP address or user ID if authenticated)
      const key = req.user?.id || req.ip;
      
      // Apply rate limiting
      await limiter.consume(key);
      next();
    } catch (error) {
      // If rate limit is exceeded
      if (error.remainingPoints !== undefined) {
        // Log rate limit violation
        secureLogger.securityLog({
          type: 'RATE_LIMIT_EXCEEDED',
          ip: req.ip,
          userId: req.user?.id || 'unauthenticated',
          path: req.path,
          limiterType: type
        });
        
        // Set rate limit headers
        res.set('Retry-After', Math.ceil(error.msBeforeNext / 1000));
        res.set('X-RateLimit-Limit', limiter.points);
        res.set('X-RateLimit-Remaining', error.remainingPoints);
        res.set('X-RateLimit-Reset', new Date(Date.now() + error.msBeforeNext).toISOString());
        
        // Send 429 Too Many Requests response
        return res.status(429).json({
          status: 'error',
          message: 'Too many requests, please try again later',
          retryAfter: Math.ceil(error.msBeforeNext / 1000)
        });
      }
      
      // For any other errors, log and continue
      secureLogger.error('Rate limiter error:', error);
      next();
    }
  };
};

module.exports = {
  createRateLimiter,
  rateLimiter,
  limiters
};